---

- name: Add the OS specific varibles
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version}}.yml"
    - "{{ ansible_os_family }}.yml"

- name: Install the required  packages
  package:
    name: "{{ network_pkgs }}"
    state: present

- name: Include CentOS8 specific tasks
  include_tasks: CentOS_8.yml
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

- name: Set default packet scheduler to reduce bufferbloat
  sysctl:
    name: net.core.default_qdisc
    value: "{{ network_scheduler }}"
    sysctl_file: /etc/sysctl.d/40-bufferbloat.conf
    sysctl_set: "{{ 'yes' if ansible_connection != 'chroot' else 'no' }}"
    reload: "{{ 'yes' if ansible_connection != 'chroot' else 'no' }}"

- name: Make sure the include line is there in interfaces file
  lineinfile:
     regexp: "^source"
     line: "source {{ net_path }}/*"
     dest: /etc/network/interfaces
     state: present
     insertafter: EOF
  when: ansible_os_family == "Debian"

- name: Create the directory for interface cfg files
  file:
      path: "{{ net_path }}"
      state: directory
  when: ansible_os_family == "Debian"

- name: Create the network configuration file for ethernet devices
  template:
     src: "ethernet_{{ ansible_os_family }}.j2"
     dest: "{{ net_path }}/ifcfg-{{ item.device }}"
  with_items: "{{ network_ether_interfaces }}"
  when: network_ether_interfaces is defined
  register: ether_result
  notify:
     - restart network

- name: Write configuration files for rhel route configuration
  template:
     src: "route_{{ ansible_os_family }}.j2"
     dest: "{{ net_path }}/route-{{ item.device }}"
  with_items: "{{ network_ether_interfaces }}"
  when: network_ether_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'
  register: route_result
  notify:
     - restart route

- name: Create the network configuration file for bond devices
  template:
     src: "bond_{{ ansible_os_family }}.j2"
     dest: "{{ net_path }}/ifcfg-{{ item.device }}"
  with_items: "{{ network_bond_interfaces }}"
  when: network_bond_interfaces is defined
  register: bond_result
  notify:
     - restart bond

- name: Make sure the bonding module is loaded
  modprobe:
     name: bonding
     state: present
  when: bond_result is changed

- name: Write configuration files for route configuration
  template:
     src: "route_{{ ansible_os_family }}.j2"
     dest: "{{ net_path }}/route-{{ item.device }}"
  with_items: "{{ network_bond_interfaces }}"
  when: network_bond_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'
  register: route_result
  notify:
     - restart route

- name: Create the network configuration file for slave in the bond devices
  template:
     src: "bond_slave_{{ ansible_os_family }}.j2"
     dest: "{{ net_path }}/ifcfg-{{ item.1 }}"
  with_subelements:
   - '{{ network_bond_interfaces }}'
   - bond_slaves
  when: network_bond_interfaces is defined
  register: bond_port_result
  notify:
     - restart bond

- name: Create the network configuration file for vlan devices
  template:
     src: "ethernet_{{ ansible_os_family }}.j2"
     dest: "{{ net_path }}/ifcfg-{{ item.device }}"
  with_items: "{{ network_vlan_interfaces }}"
  when: network_vlan_interfaces is defined
  register: vlan_result
  notify:
     - restart vlan

- name: Write configuration files for rhel route configuration with vlan
  template:
     src: "route_{{ ansible_os_family }}.j2"
     dest: "{{ net_path }}/route-{{ item.device }}"
  with_items: "{{ network_vlan_interfaces }}"
  when: network_vlan_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'
  register: route_result
  notify:
     - restart route

- name: Create the network configuration file for bridge devices
  template:
     src: "bridge_{{ ansible_os_family }}.j2"
     dest: "{{ net_path }}/ifcfg-{{ item.device }}"
  with_items: "{{ network_bridge_interfaces }}"
  when: network_bridge_interfaces is defined
  register: bridge_result
  notify:
     - restart bridge

- name: Write configuration files for rhel route configuration
  template:
     src: "route_{{ ansible_os_family }}.j2"
     dest: "{{ net_path }}/route-{{ item.device }}"
  with_items: "{{ network_bridge_interfaces }}"
  when: network_bridge_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'
  register: route_result
  notify:
     - restart route

- name: Create the network configuration file for port on the bridge devices
  lineinfile:
      dest: "{{ net_path }}/ifcfg-{{ item.1 }}"
      regexp: '^BRIDGE='
      line: "BRIDGE={{ item.0.device }}"
  with_subelements:
    - '{{ network_bridge_interfaces }}'
    - ports
  when: network_bridge_interfaces is defined
  register: bridge_port_result
  notify:
     - restart bridge

# IB

- name: Create the network configuration file for IB devices
  template:
     src: "infiniband_{{ ansible_os_family }}.j2"
     dest: "{{ net_path }}/ifcfg-{{ item.device }}"
  with_items: "{{ network_ib_interfaces }}"
  when: network_ib_interfaces is defined
  register: ib_result
  notify:
     - restart ib

- name: Write configuration files for rhel route configuration on IB
  template:
     src: "route_{{ ansible_os_family }}.j2"
     dest: "{{ net_path }}/route-{{ item.device }}"
  with_items: "{{ network_ib_interfaces }}"
  when: network_ib_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'
  register: route_result
  notify:
     - restart route

- name: flush the handlers - so that network settings are applied before any other roles.
  meta: flush_handlers

